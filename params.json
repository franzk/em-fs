{"name":"EM::FS","body":"`EM::FS` provides a simple interface to gain simple filesystem access\r\nin eventmachine via `EM::SystemCommand`.\r\n\r\n`EM::FileUtils` attempts to mimic the behavoir of the filesystem API\r\nof the Ruby stdlib. In the background it invokes linux/unix system\r\ncommands - like `rsync`, `mkdir` etc. - via the `em-systemcommand`\r\ngem.\r\n\r\nFurthermore `EM::Dir` and `EM::File` provide abstractions to crawl\r\ndirectory structures via `find` command without blocking the reactor.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'em-fs'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install em-fs\r\n\r\n## Usage\r\n\r\n### `EM::FS` using `rsync` and `find`\r\n\r\nTo invoke bare commands you can either use `EM::SystemCommand`\r\ndirectly or the methods `EM::FS.rsync` and `EM::FS.find`.\r\n\r\n### `EM::FileUtils` for simple filesystem operations\r\n\r\nThe `FileUtils` methods from the Ruby Standard Library may block the\r\neventmachine reactor. ThatÂ´s why `em-fs` uses `EM::SystemCommand` to\r\nprovide a similar non-blocking feature set.\r\n\r\n    EM.run do\r\n      EM::FileUtils.cp 'some_file', 'some_copy' do |on|\r\n        on.exit do |status|\r\n          puts 'Copied!'\r\n        end\r\n      end\r\n    end\r\n\r\nFor a full list of methods, have a look at the documentation.\r\n\r\n### Abstraction via `EM::Dir` and `EM::File`\r\n\r\n`EM::Dir[]` returns a `EM::Dir::Glob` object, containing the\r\ninformation for the `find` command. On this object you can invoke\r\nmultiple methods to see the resulting filesystem objects:\r\n\r\n    EM::Dir['./**/*.*'].each do |stat|\r\n      puts \"Some stat: #{stat.inspect}\"\r\n    end\r\n    \r\n    EM::Dir['./**/*.lisp'].each_entry do |entry|\r\n      puts \"Some entry: #{entry}\"\r\n    end\r\n    \r\n    EM::Dir['./**/*.rb'].each_path do |path|\r\n      puts \"Some path: #{path}\"\r\n    end\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","tagline":"A simple interface to gain file system access in eventmachine.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}